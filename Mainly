package pkg;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;

import javax.swing.*;
import java.util.*;
import java.util.Timer;

//這是我寫的程式，從頭到尾都是我想的。
//有些不會的地方有上網查。
//我有加了註解。
//因為學習歷程不能傳github網址，也不能傳資料夾，所以我的素材都放在一起。
//檔案請記得要在同一個資料夾，系統才能判定。

//配對遊戲
public class Mainly extends JFrame{

	Mainly() {
		new controlTheGame(this);
	}

	public class controlTheGame{ //這是控制遊戲的主要畫面

		public JButton[] bts = new JButton[16];
		public JButton bt;
		public JPanel p;
		public JMenuBar Mb;
		public JMenu menu;
		public JMenuItem degree[] = new JMenuItem[3];
		public String degreeClass[] = new String[] {"easy", "medium", "hard"};
		public JLabel LB;

		public boolean canStart = false;


		controlTheGame(Mainly TheGame){
			TheGame.setLayout(null);//這是主要畫面
			TheGame.setTitle("THIS");
			TheGame.setSize(415, 600);
			TheGame.setLocation(340, 50);




			p = new JPanel();

			for (int i = 0; i < 16; i++) {//16個按鈕
				bts[i] = new JButton();
				job.Image(this, i);
				p.add(bts[i]);
			}

			p.setLayout((new GridLayout(0, 4, 1, 1)));
			p.setBounds(0, 150, 400, 400);
			TheGame.add(p);


			bt = new JButton();				//start 按鈕
			bt.setBounds(120, 60, 170, 60);
			bt.setIcon(new ImageIcon(job.pathGenerater("else",1)));
			bt.addActionListener((e)->{
				if(canStart) {
						job.go(this, LB.getText());
						canStart=false;
					}
			});
			TheGame.add(bt);


			LB = new JLabel("Please Choose a level",SwingConstants.CENTER);
			LB.setBounds(20,-120,400,300);
			LB.setFont(new Font("微軟中黑體",Font.PLAIN,24));
			TheGame.add(LB);

			Mb = new JMenuBar();//這是選單的部分
			menu = new JMenu("level");
			for (int i=0; i<3; i++) {
				menu.addSeparator();
				degree[i] = new JMenuItem(degreeClass[i]);
				menu.add(degree[i]);
				degree[i].addActionListener((e)-> {
						LB.setText(((JMenuItem)e.getSource()).getText());
						bt.setIcon(new ImageIcon(job.pathGenerater("else",0)));
						bt.setVisible(true);
						canStart=true;
					});
			}
			Mb.add(menu);
			TheGame.setJMenuBar(Mb);




			//this.setIconImage(image);
			//////////-------------this.setMaximumSize(new Dimension(416,601));
			TheGame.setMinimumSize(new Dimension(415,600));
			TheGame.setVisible(true);

		}
	}






	public static class job {//裡面有各種靜態方法

		private static int count = 0;//計算找到幾個隨機數了
		private static int[] order = new int[16];//內含隨機數的陣列(同數字最多出現兩次)
		public static final int ChangeTimes = 3;//開始前切換次數常數
		private static final double GameTime = 16.0;//遊戲總時間常數
		private static final int MemoTime = 2500;//讓玩家計牌的時間常數
		private static final int ReFlipTime = 70;//翻牌間隔

		private static int pair = 0;//找到幾對了
		private static int source = -1;//被配對的牌(1~16)
		private static TreeSet<Integer> match = new TreeSet<>();//集合類，驗證配對用的

		private static TreeSet<Integer> tset1 = new TreeSet<>();//集合類，找隨機數用的
		private static TreeSet<Integer> tset2 = new TreeSet<>();//集合類，找隨機數用的

		public static void clear() {//清空，在go()中重新產生隨機陣列時會用到
			tset1.clear();
			tset2.clear();
		}

		public static void find16Ram() {//找到16隨機數，存在order裡

			int add = (int)(Math.random()*8);
			if(!tset1.add(add)) {
				if(!tset2.add(add)) {
					find16Ram();
					return;
				}
			}
			order[count]=add;
			count++;
		}

		public static String pathGenerater(String f,int i) {//生成位址
			return System.getProperty("user.dir")+"\\bin\\pkg\\"+f+i+".png";
		}

		private static void MySleep(int $time) {//執行緒暫停
			try {
				Thread.sleep($time);
			} catch (InterruptedException e) {}
		}

		public static void Image(controlTheGame ctrl, int which) {//初始化背景圖
			ctrl.bts[which].setIcon(null);
			ctrl.bts[which].setBackground(Color.darkGray);
		}

		public static void Image(controlTheGame ctrl, int which, String level) {//根據order賦予背景圖
			ctrl.bts[which].setIcon
			(new ImageIcon(pathGenerater(level, order[which])));

			ctrl.bts[which].setBackground(null);
		}

		public static void go(controlTheGame ctrl ,String level) {//最重要的一個method，遊戲進行用
			Thread t = new Thread(()->{//用lambda實作執行緒

				ctrl.menu.setEnabled(false);//遊戲中不能更改
				ctrl.Mb.setEnabled(false);//遊戲中不能更改
				ctrl.bt.setIcon(new ImageIcon(pathGenerater("else",1)));//遊戲中不能更改

				for(int i = 0; i < ChangeTimes; i++) {//有點像是閃爍效果，但其實是隨機產生

					job.clear();//將圖片賦予元件
					count=0;
					for (int j = 0; j < 16; j++) {
						find16Ram();
						Image(ctrl,j,level);
					}

					MySleep(100);//等

					if(i==ChangeTimes-1) {//最後一次閃爍要給玩家看
						MySleep(MemoTime);
					}

					for (int j = 0; j < 16; j++) {//初始化
						Image(ctrl,j);
					}

					MySleep(30);//等
				}



				Timer MyTime = new Timer();//計時器
				TimerTask Mytask = new TimerTask(){//實作排程
					double time = GameTime;
					public void run(){
						if(time>=0) {
							DecimalFormat df= new DecimalFormat("##.###");
							ctrl.LB.setText(df.format(time));
							time-=0.01;
						}else if(pair>=8){//贏
							this.cancel();
						}
						else{//輸
							this.cancel();
							JOptionPane.showMessageDialog(null, "Try it next time!\n\nPlease Choose a level!");
							System.exit(0);
						}

					}
				};MyTime.schedule(Mytask, 100L, 10L);

				for (int j = 0; j < 16; j++) {//遊戲開始後才能實作16個按鈕的事件
					final int jj = j;			//技術性問題，要兩次轉成區域變數
					ctrl.bts[jj].addActionListener(new ActionListener() {
						final int jjj = jj;		//技術性問題，要兩次轉成區域變數
						public void actionPerformed(ActionEvent e) {
							if(source!=jjj) {//是否作弊，點同一按鈕?
								Image(ctrl,jjj,level);//點擊的回饋，顯示圖片

								if(match.add(order[jjj])) {//用目前點擊的按鈕驗證 被配對的牌
									//集合能add表示還沒有相同數字
									if(source>=0) {//這張錯，先前又已點擊一張牌
										MySleep(ReFlipTime);

										Image(ctrl,source);
										Image(ctrl,jjj);
										match.clear();//初始化
										source = -1;//初始化
									}else {//此為被配對的牌
										source = jjj;
									}

								}else {//正確
									MySleep(ReFlipTime);
									match.clear();
									ctrl.bts[source].setEnabled(false);
									ctrl.bts[jjj].setEnabled(false);
									source=-1;
									pair++;
									if(pair>=8) {//若全部配對完，則結束遊戲
										Mytask.cancel();
										JOptionPane.showMessageDialog(null, "You are win!\n\n"
												+ "Press 'sure' to close");
										System.exit(0);
									}
								}
							}
						}});
				}
			});
			t.start();

		}
	}

	public static void main(String[] args) {
		new Mainly();
	}

}
